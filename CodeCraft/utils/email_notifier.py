import smtplib
import ssl
from email.message import EmailMessage
from datetime import datetime
import os

class EmailNotifier:
    def __init__(self, config):
        self.config = config
    
    def update_config(self, config):
        """Update email configuration"""
        self.config = config
    
    def send_alert(self, alert):
        """Send security alert via email"""
        if not self.config.get('email_enabled', False):
            return False
        
        try:
            # Email configuration
            email_from = self.config.get('email_from', '')
            email_to = self.config.get('email_to', '')
            email_password = self.config.get('email_password', '')
            
            if not all([email_from, email_to, email_password]):
                return False
            
            # Create email message
            msg = EmailMessage()
            msg['From'] = email_from
            msg['To'] = email_to
            msg['Subject'] = f"SentinelWatch Alert: {alert.get('title', 'Security Alert')}"
            
            # Email body
            body = self._create_email_body(alert)
            msg.set_content(body)
            
            # Send email
            self._send_email(msg, email_from, email_password)
            return True
            
        except Exception as e:
            print(f"Failed to send email alert: {e}")
            return False
    
    def _create_email_body(self, alert):
        """Create formatted email body for alert"""
        body = f"""
SentinelWatch Pro Security Alert

Alert Details:
-------------
Type: {alert.get('type', 'Unknown').upper()}
Severity: {alert.get('severity', 'Unknown').upper()}
Title: {alert.get('title', 'Security Alert')}
Time: {alert.get('timestamp', datetime.now().isoformat())}

Description:
{alert.get('message', alert.get('description', 'No description available'))}

Additional Information:
"""
        
        # Add type-specific information
        if alert.get('type') == 'process':
            body += f"""
Process Name: {alert.get('process_name', 'Unknown')}
Process ID: {alert.get('process_id', 'Unknown')}
"""
            if alert.get('cpu_usage'):
                body += f"CPU Usage: {alert.get('cpu_usage')}%\n"
            if alert.get('memory_usage'):
                body += f"Memory Usage: {alert.get('memory_usage')} MB\n"
        
        elif alert.get('type') == 'network':
            body += f"""
Remote Address: {alert.get('remote_address', 'Unknown')}
Remote Port: {alert.get('remote_port', 'Unknown')}
Local Port: {alert.get('local_port', 'Unknown')}
"""
        
        elif alert.get('type') == 'file':
            body += f"""
File Path: {alert.get('file_path', 'Unknown')}
Event Type: {alert.get('event_type', 'Unknown')}
File Size: {alert.get('file_size', 'Unknown')} bytes
"""
        
        body += f"""

This alert was generated by SentinelWatch Pro at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.

Please review your system security immediately.

---
SentinelWatch Pro Security Monitoring
"""
        
        return body
    
    def _send_email(self, msg, email_from, password):
        """Send email using SMTP"""
        # Determine SMTP server based on email provider
        smtp_server, smtp_port = self._get_smtp_settings(email_from)
        
        # Create secure connection and send email
        context = ssl.create_default_context()
        
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls(context=context)
            server.login(email_from, password)
            server.send_message(msg)
    
    def _get_smtp_settings(self, email_from):
        """Get SMTP settings based on email provider"""
        domain = email_from.split('@')[1].lower()
        
        smtp_settings = {
            'gmail.com': ('smtp.gmail.com', 587),
            'outlook.com': ('smtp.live.com', 587),
            'hotmail.com': ('smtp.live.com', 587),
            'yahoo.com': ('smtp.mail.yahoo.com', 587),
            'icloud.com': ('smtp.mail.me.com', 587),
        }
        
        return smtp_settings.get(domain, ('smtp.gmail.com', 587))
    
    def test_email_connection(self):
        """Test email configuration"""
        try:
            email_from = self.config.get('email_from', '')
            email_password = self.config.get('email_password', '')
            
            if not email_from or not email_password:
                return False, "Email credentials not configured"
            
            smtp_server, smtp_port = self._get_smtp_settings(email_from)
            context = ssl.create_default_context()
            
            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls(context=context)
                server.login(email_from, email_password)
            
            return True, "Email connection successful"
            
        except Exception as e:
            return False, f"Email connection failed: {str(e)}"
    
    def send_test_email(self):
        """Send a test email"""
        test_alert = {
            'type': 'system',
            'severity': 'low',
            'title': 'Test Email',
            'message': 'This is a test email from SentinelWatch Pro to verify email notifications are working correctly.',
            'timestamp': datetime.now().isoformat()
        }
        
        return self.send_alert(test_alert)
    
    def send_daily_report(self, alerts_summary):
        """Send daily security report"""
        if not self.config.get('email_enabled', False):
            return False
        
        try:
            email_from = self.config.get('email_from', '')
            email_to = self.config.get('email_to', '')
            email_password = self.config.get('email_password', '')
            
            if not all([email_from, email_to, email_password]):
                return False
            
            # Create daily report email
            msg = EmailMessage()
            msg['From'] = email_from
            msg['To'] = email_to
            msg['Subject'] = f"SentinelWatch Daily Report - {datetime.now().strftime('%Y-%m-%d')}"
            
            # Create report body
            body = self._create_daily_report_body(alerts_summary)
            msg.set_content(body)
            
            # Send email
            self._send_email(msg, email_from, email_password)
            return True
            
        except Exception as e:
            print(f"Failed to send daily report: {e}")
            return False
    
    def _create_daily_report_body(self, alerts_summary):
        """Create daily report email body"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        body = f"""
SentinelWatch Pro Daily Security Report
Date: {today}

Summary:
--------
Total Alerts: {alerts_summary.get('total', 0)}
High Severity: {alerts_summary.get('high', 0)}
Medium Severity: {alerts_summary.get('medium', 0)}
Low Severity: {alerts_summary.get('low', 0)}

Alert Types:
------------
Process Alerts: {alerts_summary.get('process', 0)}
Network Alerts: {alerts_summary.get('network', 0)}
File Alerts: {alerts_summary.get('file', 0)}
System Alerts: {alerts_summary.get('system', 0)}

System Status:
--------------
Monitoring Status: Active
Last Check: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{alerts_summary.get('top_alerts', '')}

For detailed information, please check the SentinelWatch Pro dashboard.

---
SentinelWatch Pro Security Monitoring
Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        
        return body
